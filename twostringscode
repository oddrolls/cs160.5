import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'twoStrings' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts following parameters:
     *  1. STRING s1
     *  2. STRING s2
     */

    public static String twoStrings(String s1, String s2) {
    // Write your code here
        // initialize two hashmaps to mark occurrences
        HashMap<String, Integer> freqs1=new HashMap<String, Integer>();
        HashMap<String, Integer> freqs2=new HashMap<String, Integer>();
        // define shrinking variables that make sure we check backwards each char
        int s1len=s1.length() - 1;
        int s2len=s2.length()-1;
        String ans = "";
        // no remaining letters to check
        if (s1.length()==0 || s2.length()==0){
            ans = "NO";
            return ans;
        }
        // there is a result in answer string, thus return the answer string
        if (!ans.isEmpty()){
            return ans;
        }
        // Add the last element in the list to the frequency chart
        freqs1.add(s1[s1len], 1);
        freqs2.add(s2[s2len], 1);
        // Recursive call to smaller substrings
        ans = twoStrings(s1.substring(0, s1len), s2.substring(0,s2len));
        // If the maps contain two matching keys, return yes
        if (freqs1.containsKey(s1[s1len]) == freqs2.containsKey(s2[s2len])){
          ans = "YES";
          return ans;  
        }
        return ans;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s1 = bufferedReader.readLine();

                String s2 = bufferedReader.readLine();

                String result = Result.twoStrings(s1, s2);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
